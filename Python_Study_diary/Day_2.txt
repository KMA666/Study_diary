2025年6月30日 学习日志
------------

###while循环：
	条件为真时，执行循环语句
total = 0
i = 1
while i <= 5:
    total += i
    i += 1
print(total)  # 输出：15

###用户输入验证：
确保用户输入合法数字
while True:
    user_input = input("请输入一个数字（输入 q 退出）：")
    if user_input.lower() == 'q':
        break  # 退出循环
    try:
        num = float(user_input)
        print(f"输入的数字是：{num}")
    except ValueError:
        print("输入无效，请重新输入！")

while 循环适用于：

条件驱动的循环（如用户输入验证）。
循环次数不确定的场景。
需要实现无限循环（如服务器监听）。

------------

###在Python中，1e-6 是一种科学计数法，表示 1 乘以 10 的负 6 次方，即 0.000001。

###ps.精度限制：超过 15 位左右的小数可能会有舍入误差

------------

###在 Python 中，条件表达式（也称为三元运算符）是一种简洁的语法，用于根据条件判断返回不同的值。它允许在一行代码中实现简单的条件逻辑，使代码更紧凑。

基本语法:
值1 if 条件 else 值2

执行逻辑：
如果 条件 为 True，返回 值1；
如果 条件 为 False，返回 值2。

------------

###在 Python 中，s.isdigit() 是字符串对象的一个内置方法，用于检查字符串 s 是否完全由数字字符组成。以下是关于该方法的详细介绍

基本语法:
s.isdigit()

返回值：
如果字符串 s 中的所有字符都是数字（如 0-9、Unicode 数字字符），且字符串非空，则返回 True。
否则返回 False。

------------

格式化输出
print("%.2f %.2f" % (wang, guo))

print(f"{wang:.2f} {guo:.2f}")
###两种不同的形式，效果差不多

------------

###素数的判断
这串函数：
def is_prime(x):
    if x < 2:
        return False
    for i in range(2, int(x ** 0.5) + 1):
        if x % i == 0:
            return False
    return True

------------

在编程调试过程中，Step Into和Continue是两种常用的调试操作，它们的核心区别主要体现在程序执行的粒度和流程控制方式上。以下是具体对比：

一、Step Into（单步步入）
功能
逐行执行：让程序从当前断点开始，逐行执行每一条语句，包括进入函数、方法或类的内部实现。
深入细节：当遇到函数调用时，会跳转到该函数的内部代码，继续单步执行，便于跟踪函数内部的逻辑。
适用场景
需要调试函数内部的具体执行过程，例如查看参数传递、局部变量变化等。
排查复杂逻辑中的单步错误，例如循环、条件判断的执行路径。
示例
假设代码如下：
def add(a, b):
    return a + b

x = 10
y = 20
result = add(x, y)
print(result)

当在result = add(x, y)处设置断点并点击Step Into时，调试器会跳转到add函数内部，逐行执行return a + b，
方便查看参数a和b的值及计算过程。

二、Continue（继续执行）
功能
跳过单步：让程序从当前断点开始，继续执行直到遇到下一个断点或程序结束，不逐行跟踪中间代码。
快速跳转：用于跳过已知正确的代码段，直接定位到下一个需要关注的断点，提高调试效率。
适用场景
已确认当前断点之前的代码无误，想快速进入后续关键逻辑（如下一个循环、下一次函数调用）。
避免在重复执行的代码（如循环体）中逐行调试，节省时间。
示例
在上述代码中，若在x = 10处设置断点，点击Continue后，程序会直接执行到下一个断点（若有）或直到print(result)结束，不会逐行执行y = 20和add函数内部代码。

三、核心区别对比表
维度	Step Into	Continue
执行粒度	逐行执行，包括函数内部细节	直接执行到下一个断点或程序结束
函数处理	进入函数内部继续单步执行	直接执行完函数并返回结果，不进入内部
调试目标	深入分析单步逻辑和变量变化	快速跳转至关键位置，跳过无关代码
效率	适合精细调试，但效率较低	适合快速定位，效率较高

四、总结
Step Into是 “显微镜”，用于逐行剖析代码细节，适合排查单步逻辑错误；
Continue是 “望远镜”，用于快速跳过已知正确的代码，聚焦关键断点。

------------
  